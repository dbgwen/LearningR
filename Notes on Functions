John Chambers, the creator of R once said: To understand computations in R, two slogans are helpful: 
1. Everything that exists is an object. 
2. Everything that happens is a function call.

increment <- function(number, by = 1){
   number + by
   }

remainder <- function(num, divisor = 2) {
   num %% divisor
}

You can pass functions as arguments to other functions just like you can pass data to functions. 
Let's say you define the following functions:

add_two_numbers <- function(num1, num2){
  num1 + num2
}

multiply_two_numbers <- function(num1, num2){
	num1 * num2
}

some_function <- function(func){
  func(2, 4)
}

As you can see we use the argument name "func" like a function inside of "some_function()." 
By passing functions as arguments some_function(add_two_numbers) will evaluate to 6, while
some_function(multiply_two_numbers) will evaluate to 8. 

Finish the function definition below so that if a function is passed into the "func" argument and 
some data (like a vector) is passed into the dat argument the evaluate() function will return the 
result of dat being passed as an argument to func.

Hints: This exercise is a little tricky so I'll provide a few example of how
evaluate() should act:
    1. evaluate(sum, c(2, 4, 6)) should evaluate to 12
    2. evaluate(median, c(7, 40, 9)) should evaluate to 9
    3. evaluate(floor, 11.1) should evaluate to 11
    
evaluate <- function(func, dat) {
  func(dat)
}

## indexing Vectors - https://thomasleeper.com/Rcourse/Tutorials/vectorindexing.html

## Pasting 
The ellipses can be used to pass on arguments to other functions that are used within the function you're writing. 
Usually a function that has the ellipses as an argument has the ellipses as the last argument. 
The usage of such a function would look like: ellipses_func(arg1, arg2 = TRUE, ...)

In the above example arg1 has no default value, so a value must be provided for arg1. arg2 has a default value, 
and other arguments can come after arg2 depending on how they're defined in the ellipses_func() documentation.
Interestingly the usage for the paste function is as follows:

paste (..., sep = " ", collapse = NULL)

Notice that the ellipses is the first argument, and all other arguments after the ellipses have default values. 
This is a strict rule in R programming: all arguments after an ellipses must have default values.
Take a look at the simon_says function below:

simon_says <- function(...){paste("Simon says:", ...)
 }

The simon_says function works just like the paste function, except the begining of every string is 
prepended by the string "Simon says:"

Telegrams used to be peppered with the words START and STOP in order to
demarcate the beginning and end of sentences. Write a function below called 
telegram that formats sentences for telegrams.

For example the expression `telegram("Good", "morning")` should evaluate to:
"START Good morning STOP"

telegram <- function(...){
  
}

Let's explore how to "unpack" arguments from an ellipses when you use the
ellipses as an argument in a function. Below I have an example function that
is supposed to add two explicitly named arguments called alpha and beta.
 
add_alpha_and_beta <- function(...){
First we must capture the ellipsis inside of a list and then assign the list to a variable. 
Let's name this variable `args`.
  
    args <- list(...)

We're now going to assume that there are two named arguments within args with the names `alpha` and `beta.` 
We can extract named arguments from the args list by using the name of the argument and double brackets. 
The `args` variable is just a regular list after all!
    alpha <- args[["alpha"]]
    beta  <- args[["beta"]]

Then we return the sum of alpha and beta.
alpha + beta 
 }

Have you ever played Mad Libs before? The function below will construct a sentence from parts of speech that you provide as arguments. 
We'll write most of the function, but you'll need to unpack the appropriate arguments from the ellipses.

mad_libs <- function(...){
  # Do your argument unpacking here!
  
  # Don't modify any code below this comment.
  # Notice the variables you'll need to create in order for the code below to
  # be functional!
  paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}

mad_libs <- function(...){
  args <- list(...)
  
  place <- args[["place"]]
  adjective <- args[["adjective"]]
  noun <- args[["noun"]]
  
  paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}

The syntax for creating new binary operators in R is unlike anything else in R, but it allows you to define a new syntax for your function. 
I would only recommend making your own binary operator if you plan on using it often!

User-defined binary operators have the following syntax:
    %[whatever]%, where [whatever] represents any valid variable name.

Let's say I wanted to define a binary operator that multiplied two numbers and then added one to the product. 
An implementation of that operator is below:
 
 "%mult_add_one%" <- function(left, right){ # Notice the quotation marks!
  left * right + 1
 }

I could then use this binary operator like `4 %mult_add_one% 5` which would evaluate to 21.
Write your own binary operator below from absolute scratch! Your binary
operator must be called %p% so that the expression:

"Good" %p% "job!"

will evaluate to: "Good job!"

"%p%" <- function(){ # Remember to add arguments!
  
}
    
 
