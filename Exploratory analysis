## Exploratory Data Analysis

## Week 1

    ## Principles of Analytic Graphs
       1. Show comparisons
          - Evidence fo hypothesis is always relative to another competing hypothesis
          - Always ask "compared to what?"
       2. Show causlaity, mechanisms, explanation, systematic structure
          - What is your causal framework for thinking about a question?
       3. Show multivariate data (show your data)
          - Multivariate = 2+ variables
          - The real world is multivariate
          - Need to "escape flateland"
        4. Integrate evidence
          - Completely integrate words, numbers, images, diagrams
          - Data graphics should make use of many modes of data presentation
          - Don't let the tool drive the analysis
        5. Describe and document the evidence with labels, scales, sources
          - A data graphic should tell a complete story that is credible
        6. Content is king
          - Analytical presentations ultimately stand or fall dependingon the quality, relevance, and integrity of content        
          ** Reference - Edward Tufte (206) Beautiful Evidence
          
     ## Exploratory Graphs
        Exploratory graphs are for yourself to explore what is going on in the data. Tend to made quickly, in large quantities, 
        are for personal understanding, axes/legends are generllay cleaned up later, and color/size is used for info
        
        1. To understand data properties
        2. To find pattenrsin data
        3. To suggest modeling strategies
        4. To debug analyses
        5. To communicate results
        
        ** Simple summaries of data - one dimensional
          - Five-number summary: min, max, mean, median, IQR
          - Boxplots - shows IQR, can overlay lines at relevant numbers
          - Histograms - more detail about shape of distirbution
          - Density Plot
          - Barplot - shows data by categories
          
         ** Two dimensional summaries
          - Multiple.overlayed 1-D plots (Lattice/ggplot), e.g. multiple boxplots, histograms
          - Scatterplots - plots two variables
          - smooth scatterplots
          
         ** Two or more dimensional summaries
          - Overlayed/multiple 2-D plots
          - Use color, size, shape to add dimensions
          - Spinning plots
          - Actual 3-D plots (not that useful)
          - R Graph Gallery, R Bloggers
          
       ## Plotting Systems in R
          Three core plotting systems in R: 
              1. Base plotting system - blank canvas, start with plot function, add piece by piece
                 - Plot function + text, lines, points, axis
                 - Series of R commands, hard to take back
                   with(df, plot(x, y))
              2. Lattice plot system - use lattice package
                 - Plots are created sith single function call - xyplot, bxplot
                 - Useful for conditioning plots - look at change in x,y conditoning on z
                 - Use isngle function call to plot - difficult to add plot once it is created
                 - Annotation is difficult
                   library(lattice)
                   xyplot(Life.Exp ~ Income | region, data = state, layout = c(4, 1))
               3. ggplot2 system
                 - Splits differnence between base and lattice systems
                 - Automatically deals with spacing, texts, titles, and can annotate
                 - Default makes many choices for you, but still customizable
                   library(ggplot2)
                   qplot(disply, hwy, data = mpg)
              
        ## Base Plotting System in R
           - Core plotting and graphics in R are in:
                1. graphics - plot, hist, boxplot
                2. grDevices packages - code for implementing graphic devices
                3. lattice - xyplot, bwplot, levelplot
                4. grid - package built on lattice
           - Process of making a plot
                - Where is the grpahic going to be printed, on screen, etc
                - How is plot going to be used?
                - How much data will be used?
                - Will need to resize?
                - What graphic system to use? Base, Lattice, or ggplot2
            - Base Graphics, look at ?par
                - plot(x, y) - generic function that pulls up scatterplot
                - hist(x)
                - boxplot(Y ~ X, Z, xlab = "label", ylab = "label"
                - Key functions for Base plots
                    - pch: the plotting symbol
                    - lty: the line type, ca nbe dashed, dotted
                    - lwd: the line width
                    - col: the plotting color, specified as a number, colors() gives vector of colors by name
                    - xlab: string for x-axis label
                    - ylab: string for y-axis label
                 - par() function to specify global graphics setting
                    - las: orientation of axis
                    - bg: background color
                    - mar: margin size
                    - oma: outer margin size 9default is 0)
                    - mfrow: number of plots per row, column (plots are gilled row-wise)
                    - mfcol: numbe rof plots per row, column (plots are filled column-wise)
                  - Key Base Plotting functions
                    - plot: scatterplot
                    - lines: adds to a plot
                    - points: add points to aplot
                    - text: adds labels to plot using specified x, y
                    - title: add annotations to x, y axis labels, subtitle, outer margin
                    - mtext: add arbitrary text to margins (inner or outer) of the plot
                    - axis: adding axis ticks/labels
                    - Can make multiple plots on single by calling two plots within {}
              - Base graphics demonstration - build on to the graphic, cannot undo, can overwrite
                hist(x)
                plot(x, y) - default open circle, label on axis is the name of object
                title("title")
                text(coordinate 1, coordinate 2, "text") 
                abline(fit)
                par(mar= c(4, 4, 2, 2)) - margins around all four sides of the plot
                example(points) - will give you examples of the available points
      
       ## Graphics Devices
          - They are something you can make a plot appear - a window or screen, PDF, PNG, SVG
          - When you make aplot in R, it has to be sent to agrpahic device to be generated
            Most common sent to windows
          - Use ?Devices to see full list of where to send a plot
          - For plots to be printer out, usually a file device is more appropriate
          - Call a plotting function, e.g. plot, xyplot, qplot
            Plot appears on device
            Annotate plot
            Enjoy
          - Explicitly launch a file device to make plot - creating a plot to another device
            Call plot function
            Annotatre plot
            Explicitly close graphics device dev.off()
          - Graphic file devices
                1. pdf: useful for line-type graphics, resizes well
                2. svg: XML-based scalable vector graphics supports web-based plots
                3. win.metafile: windows metafile format (only windows)
                4. postscript: older format, resizes well, postscript file
                5. png: portable network graphics, good for line drawings, does not resize well
                6. jpeg: good for photographs, natural scenes, uses many points, does not resize well
                7. tiff: creates bitmap files in the TIFF format
                8. bmp: a native Windows bitmapped format
           - Can have multiple open graphics devices to view all the graphics, can only plot to one device at a time
           - The currently active can be found using dev.cur(), every graphic device assigned an integer from 2+
           - copy plots using dev.copy()
           - copy to a PDF file using dev.copy2pdf()
           
 ## Week 2
        
     ## Lattice Plotting Systems - useful for high dimensional data and multiple plots
        lattice - contains code for producing Trellis graphics, indpendent of "base" graphics.
            1. xyplot: main function for creating scatterplots
            2. bwplot: boxplots
            3. histogram: histograms
            4. stripplot: boxplot with points
            5. dotplot: plot dots on violin strings
            6. splom: scatterplot matrix
            7. levelplot, contourplot: plotting "image" data
            
         lattice example
            library(lattice)
            xyplot(y ~ x | f * g, data=dataframe, layout=c(1,2)
            * = interaction
            f and g = conditoning variables
            if no dataframe is passed, the parent frame is used
            layout = allows for graphs to be side-by-side or in a column
         
         lattice vs base
            - Base graphics plot data directly to graphics device
            - lattice returns an object class - trellis and auto prints object
            - can save plot object and have it saved to workspace
            - p <- xyplot(y ~ x, data=dataframe)
              print(p)
          
         lattice sas a panel function 
            - xyplot(y ~ x | f, panel = function(x,y, ...) {
                panel.xyplot(x,y, ...) - first call the default function
                panel.abline(h=median(y), lty=2) - add a horizontal line at the median
                    })
            - add regression line with panel.lmline(x, y, col=2)
            - cannot use annotation, must put it all in with one call
               set.seed(10)
                x <- rnorm(100)
                f <- rep(0:1, each = 50)
                y <- x + f - f * x + rnorm(100, sd = 0.5)
                f <- factor(f, labels = c("Group 1", "Group 2"))
                xyplot(y ~ x | f, layout = c(2, 1)) - plot with 2 panels
      
      ## ggplot2
          Combination of base and lattice plotting systems
            - An implementation of the "Grammar of Graphics" by Leland Wilkinson, created by Hadley Wickham
            - ggplot2 differs from base and lattice, easier to implement subsets of data using factors variables
          
          The basics of ggplot2 - qplot
            - library(ggplot2)
              qplot(x, y, data = dataframe)
              qplot(x, y, data = dataframe, color=factor variable) - adds auto legend with color for each level of factor
              qplot(x, y, data = dataframe, geom=c("point", "smooth")) - adds a visual representation of a subset of observations
              qplot(x, data = dataframe) - provides a histogram
              qplot(x, data = dataframe, fill=factor variable) - provides a histogram with factors colored in with legend
              qplot(x, y, data =dataframe, facets =.~factor variable) - adds seperate graphs by factor variable
              qplot(x, data = dataframe, facets = factor variable ~., binwidth =2) - adds seperate graphs of histograms by factor variable
              qplot(log(x), data= dataframe) - histogram of the log transformed variables
              qplot(log(x), data = dataframe, fill - factor variable) - histogram by group
              qplot(log(x), data = dataframe, geo = "density") - lowess-type smoothing line
              qplot(log(x), data = dataframe, geo="density", color = factor variables)
              qplot(x, y, data=dataframe) - scatterplot
              qplot(x, y, data = dataframe, shape = factor variable) - makes each point a different shape for each level of factor variable
              qplot(x, y,data = dataframe, color = factor variable,	geom=c("point",	"smooth"),method="lm") - fits regression lines for each level of factor variable
              qplot(x, y,data = dataframe,geom=c("point","smooth"),method="lm", facets = .~factor variable) - adds seperate graph for each level of factor variable
              qplot(x, y, data = dataframe, facets = . ~ factor variable, geom=c("point", "smooth"), method = "lm”) - fits regression lines on two seperate scatterplots
           - Other qplot notes
              g <- ggplot(x, y) - save plot as an object
              print(g) - prints the plot
              p <- g + geom_point() - auto-print object without saving
              geom_smooth - lowess smoother line on plot
              geom_smooth(method = "lm") - adds a regression line instead of a lowess line
              facets - useful for conditoning on a factor variable - make sure factor variables are labeled nicely
              xlab(), ylab(), labs(), ggtitle() - to label titles, axis
              theme(legen.position = "none") - colors and position
              theme_gray() - gray background
              theme_bw() - more stark and plain
              color of points, color ="steelblue" - changes color of points
              axis limits - coord_cartesian(ylim = c(-3, 3)) - sets the y-axis limits
              Use cut() to make a variable categorical, useful for qplot plots using a categorical variable
              
              
              
              
          
            
     
        
           
       
       
       
       
       
    
          
          
          
